<?php
/**
 * Class file for PayPalTypeSubscriptionInfoType
 * @date 14/07/2012
 */
/**
 * Class PayPalTypeSubscriptionInfoType
 * Documentation : SubscriptionInfoType Information about a PayPal Subscription.
 * @date 14/07/2012
 */
class PayPalTypeSubscriptionInfoType extends PayPalWsdlClass
{
	/**
	 * The SubscriptionID
	 * @var string
	 */
	public $SubscriptionID;
	/**
	 * The SubscriptionDate
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : Subscription start date
	 * @var dateTime
	 */
	public $SubscriptionDate;
	/**
	 * The EffectiveDate
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : Date when the subscription modification will be effective
	 * @var dateTime
	 */
	public $EffectiveDate;
	/**
	 * The RetryTime
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : Date PayPal will retry a failed subscription payment
	 * @var dateTime
	 */
	public $RetryTime;
	/**
	 * The Username
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : Username generated by PayPal and given to subscriber to access the subscription. Character length and limitations: 64 alphanumeric single-byte characters
	 * @var string
	 */
	public $Username;
	/**
	 * The Password
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : Password generated by PayPal and given to subscriber to access the subscription. For security, the value of the password is hashed. Character length and limitations: 128 alphanumeric single-byte characters
	 * @var string
	 */
	public $Password;
	/**
	 * The Recurrences
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : The number of payment installments that will occur at the regular rate. Character length and limitations: no limit
	 * @var string
	 */
	public $Recurrences;
	/**
	 * The Terms
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- maxOccurs : unbounded
	 * 	- documentation : Subscription duration and charges
	 * @var PayPalTypeSubscriptionTermsType
	 */
	public $Terms;
	/**
	 * The reattempt
	 * Meta informations :
	 * 	- use : required
	 * @var string
	 */
	public $reattempt;
	/**
	 * The recurring
	 * Meta informations :
	 * 	- use : required
	 * @var string
	 */
	public $recurring;
	/**
	 * Constructor
	 * @param string SubscriptionID
	 * @param dateTime SubscriptionDate
	 * @param dateTime EffectiveDate
	 * @param dateTime RetryTime
	 * @param string Username
	 * @param string Password
	 * @param string Recurrences
	 * @param PayPalTypeSubscriptionTermsType Terms
	 * @param string reattempt
	 * @param string recurring
	 * @return PayPalTypeSubscriptionInfoType
	 */
	public function __construct($_SubscriptionID = null,$_SubscriptionDate = null,$_EffectiveDate = null,$_RetryTime = null,$_Username = null,$_Password = null,$_Recurrences = null,$_Terms = null,$_reattempt = null,$_recurring = null)
	{
		parent::__construct(array('SubscriptionID'=>$_SubscriptionID,'SubscriptionDate'=>$_SubscriptionDate,'EffectiveDate'=>$_EffectiveDate,'RetryTime'=>$_RetryTime,'Username'=>$_Username,'Password'=>$_Password,'Recurrences'=>$_Recurrences,'Terms'=>$_Terms,'reattempt'=>$_reattempt,'recurring'=>$_recurring));
	}
	/**
	 * Set SubscriptionID
	 * @param string SubscriptionID
	 * @return string
	 */
	public function setSubscriptionID($_SubscriptionID)
	{
		return ($this->SubscriptionID = $_SubscriptionID);
	}
	/**
	 * Get SubscriptionID
	 * @return string
	 */
	public function getSubscriptionID()
	{
		return $this->SubscriptionID;
	}
	/**
	 * Set SubscriptionDate
	 * @param dateTime SubscriptionDate
	 * @return dateTime
	 */
	public function setSubscriptionDate($_SubscriptionDate)
	{
		return ($this->SubscriptionDate = $_SubscriptionDate);
	}
	/**
	 * Get SubscriptionDate
	 * @return dateTime
	 */
	public function getSubscriptionDate()
	{
		return $this->SubscriptionDate;
	}
	/**
	 * Set EffectiveDate
	 * @param dateTime EffectiveDate
	 * @return dateTime
	 */
	public function setEffectiveDate($_EffectiveDate)
	{
		return ($this->EffectiveDate = $_EffectiveDate);
	}
	/**
	 * Get EffectiveDate
	 * @return dateTime
	 */
	public function getEffectiveDate()
	{
		return $this->EffectiveDate;
	}
	/**
	 * Set RetryTime
	 * @param dateTime RetryTime
	 * @return dateTime
	 */
	public function setRetryTime($_RetryTime)
	{
		return ($this->RetryTime = $_RetryTime);
	}
	/**
	 * Get RetryTime
	 * @return dateTime
	 */
	public function getRetryTime()
	{
		return $this->RetryTime;
	}
	/**
	 * Set Username
	 * @param string Username
	 * @return string
	 */
	public function setUsername($_Username)
	{
		return ($this->Username = $_Username);
	}
	/**
	 * Get Username
	 * @return string
	 */
	public function getUsername()
	{
		return $this->Username;
	}
	/**
	 * Set Password
	 * @param string Password
	 * @return string
	 */
	public function setPassword($_Password)
	{
		return ($this->Password = $_Password);
	}
	/**
	 * Get Password
	 * @return string
	 */
	public function getPassword()
	{
		return $this->Password;
	}
	/**
	 * Set Recurrences
	 * @param string Recurrences
	 * @return string
	 */
	public function setRecurrences($_Recurrences)
	{
		return ($this->Recurrences = $_Recurrences);
	}
	/**
	 * Get Recurrences
	 * @return string
	 */
	public function getRecurrences()
	{
		return $this->Recurrences;
	}
	/**
	 * Set Terms
	 * @param SubscriptionTermsType Terms
	 * @return SubscriptionTermsType
	 */
	public function setTerms($_Terms)
	{
		return ($this->Terms = $_Terms);
	}
	/**
	 * Get Terms
	 * @return PayPalTypeSubscriptionTermsType
	 */
	public function getTerms()
	{
		return $this->Terms;
	}
	/**
	 * Set reattempt
	 * @param string reattempt
	 * @return string
	 */
	public function setReattempt($_reattempt)
	{
		return ($this->reattempt = $_reattempt);
	}
	/**
	 * Get reattempt
	 * @return string
	 */
	public function getReattempt()
	{
		return $this->reattempt;
	}
	/**
	 * Set recurring
	 * @param string recurring
	 * @return string
	 */
	public function setRecurring($_recurring)
	{
		return ($this->recurring = $_recurring);
	}
	/**
	 * Get recurring
	 * @return string
	 */
	public function getRecurring()
	{
		return $this->recurring;
	}
	/**
	 * Method returning the class name
	 * @return string __CLASS__
	 */
	public function __toString()
	{
		return __CLASS__;
	}
}
?>