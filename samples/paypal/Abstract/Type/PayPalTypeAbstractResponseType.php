<?php
/**
 * Class file for PayPalTypeAbstractResponseType
 * @date 14/07/2012
 */
/**
 * Class PayPalTypeAbstractResponseType
 * Documentation : Base type definition of a response payload that can carry any type of payload content with following optional elements: - timestamp of response message, - application level acknowledgement, and - application-level errors and warnings.
 * @date 14/07/2012
 */
class PayPalTypeAbstractResponseType extends PayPalWsdlClass
{
	/**
	 * The Timestamp
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : This value represents the date and time (GMT) when the response was generated by a service provider (as a result of processing of a request).
	 * @var dateTime
	 */
	public $Timestamp;
	/**
	 * The Ack
	 * Meta informations :
	 * 	- documentation : Application level acknowledgement code.
	 * @var PayPalTypeAckCodeType
	 */
	public $Ack;
	/**
	 * The CorrelationID
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- documentation : CorrelationID may be used optionally with an application level acknowledgement.
	 * @var string
	 */
	public $CorrelationID;
	/**
	 * The Errors
	 * Meta informations :
	 * 	- minOccurs : 0
	 * 	- maxOccurs : unbounded
	 * @var PayPalTypeErrorType
	 */
	public $Errors;
	/**
	 * The Version
	 * Meta informations :
	 * 	- documentation : This refers to the version of the response payload schema.
	 * @var string
	 */
	public $Version;
	/**
	 * The Build
	 * Meta informations :
	 * 	- documentation : This refers to the specific software build that was used in the deployment for processing the request and generating the response.
	 * @var string
	 */
	public $Build;
	/**
	 * The any
	 * @var DOMDocument
	 */
	public $any;
	/**
	 * Constructor
	 * @param dateTime Timestamp
	 * @param PayPalTypeAckCodeType Ack
	 * @param string CorrelationID
	 * @param PayPalTypeErrorType Errors
	 * @param string Version
	 * @param string Build
	 * @param DOMDocument any
	 * @return PayPalTypeAbstractResponseType
	 */
	public function __construct($_Timestamp = null,$_Ack = null,$_CorrelationID = null,$_Errors = null,$_Version = null,$_Build = null,$_any = null)
	{
		parent::__construct(array('Timestamp'=>$_Timestamp,'Ack'=>$_Ack,'CorrelationID'=>$_CorrelationID,'Errors'=>$_Errors,'Version'=>$_Version,'Build'=>$_Build,'any'=>$_any));
	}
	/**
	 * Set Timestamp
	 * @param dateTime Timestamp
	 * @return dateTime
	 */
	public function setTimestamp($_Timestamp)
	{
		return ($this->Timestamp = $_Timestamp);
	}
	/**
	 * Get Timestamp
	 * @return dateTime
	 */
	public function getTimestamp()
	{
		return $this->Timestamp;
	}
	/**
	 * Set Ack
	 * @param AckCodeType Ack
	 * @return AckCodeType
	 */
	public function setAck($_Ack)
	{
		return ($this->Ack = PayPalTypeAckCodeType::valueIsValid($_Ack)?$_Ack:null);
	}
	/**
	 * Get Ack
	 * @return PayPalTypeAckCodeType
	 */
	public function getAck()
	{
		return $this->Ack;
	}
	/**
	 * Set CorrelationID
	 * @param string CorrelationID
	 * @return string
	 */
	public function setCorrelationID($_CorrelationID)
	{
		return ($this->CorrelationID = $_CorrelationID);
	}
	/**
	 * Get CorrelationID
	 * @return string
	 */
	public function getCorrelationID()
	{
		return $this->CorrelationID;
	}
	/**
	 * Set Errors
	 * @param ErrorType Errors
	 * @return ErrorType
	 */
	public function setErrors($_Errors)
	{
		return ($this->Errors = $_Errors);
	}
	/**
	 * Get Errors
	 * @return PayPalTypeErrorType
	 */
	public function getErrors()
	{
		return $this->Errors;
	}
	/**
	 * Set Version
	 * @param string Version
	 * @return string
	 */
	public function setVersion($_Version)
	{
		return ($this->Version = $_Version);
	}
	/**
	 * Get Version
	 * @return string
	 */
	public function getVersion()
	{
		return $this->Version;
	}
	/**
	 * Set Build
	 * @param string Build
	 * @return string
	 */
	public function setBuild($_Build)
	{
		return ($this->Build = $_Build);
	}
	/**
	 * Get Build
	 * @return string
	 */
	public function getBuild()
	{
		return $this->Build;
	}
	/**
	 * Set any
	 * @param DOMDocument any
	 * @return DOMDocument
	 */
	public function setAny($_any)
	{
		return ($this->any = $_any);
	}
	/**
	 * Get any
	 * @return DOMDocument
	 */
	public function getAny()
	{
		if(!($this->any instanceof DOMDocument))
		{
			$dom = new DOMDocument('1.0','UTF-8');
			$dom->formatOutput = true;
			$dom->loadXML($this->any);
			$this->setAny($dom);
		}
		return $this->any;
	}
	/**
	 * Method returning the class name
	 * @return string __CLASS__
	 */
	public function __toString()
	{
		return __CLASS__;
	}
}
?>